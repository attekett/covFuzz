# covFuzz

covFuzz is coverage analysis tool (and fuzzer). Idea in covFuzz is similar to afl( http://lcamtuf.coredump.cx/afl/ ), but covFuzz allows
user defined fuzzers, and instead of custom compiler it uses ASanCoverage( https://code.google.com/p/address-sanitizer/wiki/AsanCoverage ) for coverage analysis.


NOTE: 
This tool has been under development for couple of months, and is still very much experimental. 

There is some example configuration files in ./examples and more documentation is coming.

If you have any questions and/or ideas. Let me know.



Basically using it is as easy as building with ASan. 
CC=clang CXX=clang++ CFLAGS='-fsanitize=address -fsanitize-coverage=3' CXXFLAGS='-fsanitize=address -fsanitize-coverage=3' ./configure && make

Execution steps:
0. DIR=inputDirectory
1. read file list DIR
 2. if files.length>0, exec target program for filename=files.pop()
  3. if asan-trace, save file and asan-trace to resultDirectory, unlink file: GOTO 2
  4. else read .sancov files
   5. if new blocks, save file to outputDirectory:(Note: no unlink) GOTO 2
   6. else if(DIR!=inputDirectory && DIR!=outputDirectory) unlink file: GOTO 2
 7. else  
  8. if files left in DIR
  	 9.  generate test cases from DIR/* to tmpDirectory/samples
  	 10. DIR=tmpDirectory/samples: GOTO 1
  11. else DIR=outputDirectory: GOTO 1 

Textual explanation:

covFuzz initialises by running all files from <inputDirectory> through the target program and analysing the ASanCov outputs. 
If optimize is set, all files that do not give new coverage are removed.(check config.maxBlockCount)
Then covFuzz uses generatorFunction(Note: can be an array of generator functions.) to generate <filePerRound> fuzzed files to
<outputDirectory>/samples. These files are then fed to the target program one by one and the .sancov files analysed. 
If file doesn't reveal any new coverage it is removed. If file causes new coverage it is copied to <inputDirectory> and the
original file is left in <outputDirectory>/samples. When covFuzz finishes with files from <outputDirectory>/samples it checks
if any files caused new coverage(were left in <outputDirectory>/samples). If new coverage was found covFuzz executes
generatorFunction to those files, if not then generatorFunction is called to files from <inputDirectory>

usage: node covFuzz.j-i <instance count> -d <sample dir> -c <config-file> -kill <binary-name as seen for pkill>
Notes:

0. When there is problems with this tool, ask in IRC! These instructions are far from complete. :D

1. Check covFuzz.js for all config-values and the values that can be set via cli. And check example config-files.

2.If your target is a tool that exits after consuming the test case ALWAYS use exec-mode. It is faster and coverage output is more reliable.
spawn-mode is designed for gui programs and it uses /proc/pid/stat to check if target program state!=Running and kills the program when state change is detected, depending on the target program, the program might be killed before execution is completed and some coverage data might be missed.

3.exec/spawn command is always built <targetBin> <preArgs> <fileName> <postArgs>. pre/postArgs are given as array and joined with ' '.

4.default config:(undefined values are set via cli and/or config-file) (Might be missing something.)

var config={
	analyzeOnly:false, //Exit after analyzing input corpus. Can be used to minimize corpus with optimize setting.
	ASAN_OPTIONS:'detect_leaks=0,coverage_bitset=1,coverage=1,coverage_dir=', //env-variable ASAN_OPTIONS. tmp-dir will be appended in the end of this variable 
	binaries:['.*'], //array of binaries/regexp that is used to select .sancov files. i.e. ["libxml","freetype","libX*"]
	debug: false, // obvious and only partially implemented
	fileExtension:undefined, //file-extension used with output files.
	filesPerRound:100, //How many files should be generated by test case generator function. see generatorFunction
	inputDirectory:undefined, //Sample directory. 
	instanceCount:1, //How many parallel instances of target program is executed.
	kill:undefined, //pkill -9 <this> when timeout occurs.
	killTimeout:10000, //obvious in milliseconds
	maxBlockCount:1, //How many files executing specific block are taken into corpus.
	maxTestCaseCount:undefined, //Execute this many test cases and then exit. Continue indefinitely if undefined.
	optimize:false, //Optimize input corpus before fuzzing.
	outputDirectory:undefined, //if set, files will be originally read from inputDirectory and all files with new coverage are copied to this directory.
	tempDirectory:undefined, //<this>+'/'+<instance number> is used as temp folder for ASanCov outputs and <this>+'/samples' is used for generator output.
	postArgs:[],
	preArgs:[],
	resultDirectory:undefined, //if crash is found, repro-file and asan-trace is copied to this folder.
	type:'exec'//defines if exec- or spawn-mode is used. 
	
	generatorFunction:function(sampleFiles,callback){
		if(!this.surku){
			var surkuConfig={
				maxMutations:20,
				minMutations:1,
				chunkSize:3000,
			}
			var S=require('../Surku/Surku.js');
			this.surku=new S(surkuConfig)
		}
		var fileCount=this.filesPerRound
		var prefix=new Date().getTime()

		while(fileCount--){
			fs.writeFileSync(this.outputDirectory+'/samples/'+prefix+fileCount+'.'+this.fileExtension,this.surku.generateTestCase(fs.readFileSync(ra(sampleFiles))))
		}
		callback()
	}

}

5. There is couple of example generatorFunctions in testCaseGeneratorFunctions.js

6. covFuzz can take use of the new ASanCoverage feature BitSet, but you have to build your target with new enough LLVM/clang. With bitset there is problem with programs using dlopen in the middle of the run, but covFuzz can handle it.


