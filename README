# covFuzz

covFuzz is coverage analysis tool (and fuzzer). Idea in covFuzz is similar to afl( http://lcamtuf.coredump.cx/afl/ ), but covFuzz allows
user defined fuzzers, and instead of custom compiler it uses ASanCoverage( https://code.google.com/p/address-sanitizer/wiki/AsanCoverage ) for coverage analysis.

NOTE: 

There is some example configuration files in ./examples and more documentation is coming.

If you have any questions and/or ideas. Let me know.


Basically using it is as easy as building with ASan. Currently tested with llvm/clang rev:r246532, but any rev new enough to have -fsanitize-coverage=edge should do. 

CC=clang CXX=clang++ CFLAGS='-fsanitize=address -fsanitize-coverage=edge' CXXFLAGS='-fsanitize=address -fsanitize-coverage=edge' ./configure && make

Execution steps:
0. DIR=inputDirectory
1. read file list DIR
 2. if files.length>0, exec target program for filename=files.pop()
  3. if asan-trace, save file and asan-trace to resultDirectory, unlink file: GOTO 2
  4. else read .sancov files
   5. if new blocks, save file to outputDirectory:(Note: no unlink) GOTO 2
   6. else if(DIR!=inputDirectory && DIR!=outputDirectory) unlink file: GOTO 2
 7. else  
  8. if files left in DIR
  	 9.  generate test cases from DIR/* to tmpDirectory/samples
  	 10. DIR=tmpDirectory/samples: GOTO 1
  11. else DIR=outputDirectory: GOTO 1 

Textual explanation:

covFuzz initialises by running all files from <inputDirectory> through the target program and analysing the ASanCov outputs. 
If optimize is set, all files that do not give new coverage are removed.(check config.maxBlockCount)
Then covFuzz uses generatorFunction(Note: can be an array of generator functions.) to generate <filePerRound> fuzzed files to
<outputDirectory>/samples. These files are then fed to the target program one by one and the .sancov files analysed. 
If file doesn't reveal any new coverage it is removed. If file causes new coverage it is copied to <inputDirectory> and the
original file is left in <outputDirectory>/samples. When covFuzz finishes with files from <outputDirectory>/samples it checks
if any files caused new coverage(were left in <outputDirectory>/samples). If new coverage was found covFuzz executes
generatorFunction to those files, if not then generatorFunction is called to files from <inputDirectory>



usage: node covFuzz.js -c ./config.js -d <input_dir> [-o output_dir] -i <parallel_instances_of_target> [--optimize] [-a]

commandline:

'--debug'			: enable debug-prints
'-d <input_dir>'	: where samples are located  
'-o <output_dir'	: if given, "useful" files are stored here and after initial check fuzzing continues from this dir.
'-i <int>'			: count of how many parallel instances of the target program is launched
'-r'				: read input-files in reverse order. By default going from smallest to largest. Useful when optimizing samples.
'--optimize'		: optimize samples. removes all input-files that do not give new coverage
'-kill <string'		: specify the process-names to be killed on timeout
'-a'				: analyze only. covFuzz will exit after going through files from input_dir
'-max <int>'		: covFuzz will exit when specified number of test cases have been executed 
